// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.1
// source: processingdatabase.proto

package ProcessingDatabase

import (
	Common "Dressy/Common"
	FileExchange "Dressy/FileExchange"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of fileexchange.proto.

type UploadStatusCode = FileExchange.UploadStatusCode

const UploadStatusCode_OK = FileExchange.UploadStatusCode_OK
const UploadStatusCode_FAILED = FileExchange.UploadStatusCode_FAILED

var UploadStatusCode_name = FileExchange.UploadStatusCode_name
var UploadStatusCode_value = FileExchange.UploadStatusCode_value

type FileData = FileExchange.FileData
type UploadStatus = FileExchange.UploadStatus

// Describes set of possible values for Record status
type RecordStatus int32

const (
	RecordStatus_NEW        RecordStatus = 0 // new raw data, without any embeddings or other unprepared fields
	RecordStatus_PROCESSING RecordStatus = 1 // data is in processing now, waiting for update embeddings or other prepared fields
	RecordStatus_PROCEESSED RecordStatus = 2 // data is ready for using, can be sent to searching database
	RecordStatus_FINISHED   RecordStatus = 3 // data was succesfully sent to searching database, and is using now
	RecordStatus_ERROR      RecordStatus = 4 // something went wrong oin one of the stage of the data life cycle, check the 'LastErrorMessage' field in the 'Records' table, and fix the issue manually
)

// Enum value maps for RecordStatus.
var (
	RecordStatus_name = map[int32]string{
		0: "NEW",
		1: "PROCESSING",
		2: "PROCEESSED",
		3: "FINISHED",
		4: "ERROR",
	}
	RecordStatus_value = map[string]int32{
		"NEW":        0,
		"PROCESSING": 1,
		"PROCEESSED": 2,
		"FINISHED":   3,
		"ERROR":      4,
	}
)

func (x RecordStatus) Enum() *RecordStatus {
	p := new(RecordStatus)
	*p = x
	return p
}

func (x RecordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_processingdatabase_proto_enumTypes[0].Descriptor()
}

func (RecordStatus) Type() protoreflect.EnumType {
	return &file_processingdatabase_proto_enumTypes[0]
}

func (x RecordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordStatus.Descriptor instead.
func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{0}
}

type Gender int32

const (
	Gender_UNDEFINED Gender = 0
	Gender_MALE      Gender = 1
	Gender_FRMALE    Gender = 2
	Gender_UNISEX    Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNDEFINED",
		1: "MALE",
		2: "FRMALE",
		3: "UNISEX",
	}
	Gender_value = map[string]int32{
		"UNDEFINED": 0,
		"MALE":      1,
		"FRMALE":    2,
		"UNISEX":    3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_processingdatabase_proto_enumTypes[1].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_processingdatabase_proto_enumTypes[1]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{1}
}

// Insert data
type InsertRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Record              `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRecordsRequest) Reset() {
	*x = InsertRecordsRequest{}
	mi := &file_processingdatabase_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRecordsRequest) ProtoMessage() {}

func (x *InsertRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRecordsRequest.ProtoReflect.Descriptor instead.
func (*InsertRecordsRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{0}
}

func (x *InsertRecordsRequest) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type InsertRecordsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        []*Common.CommandStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRecordsResponse) Reset() {
	*x = InsertRecordsResponse{}
	mi := &file_processingdatabase_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRecordsResponse) ProtoMessage() {}

func (x *InsertRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRecordsResponse.ProtoReflect.Descriptor instead.
func (*InsertRecordsResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{1}
}

func (x *InsertRecordsResponse) GetStatus() []*Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CsvFileData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Source            string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	FieldsFormatRegex string                 `protobuf:"bytes,2,opt,name=fields_format_regex,json=fieldsFormatRegex,proto3" json:"fields_format_regex,omitempty"`
	FileData          *FileExchange.FileData `protobuf:"bytes,3,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CsvFileData) Reset() {
	*x = CsvFileData{}
	mi := &file_processingdatabase_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvFileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvFileData) ProtoMessage() {}

func (x *CsvFileData) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvFileData.ProtoReflect.Descriptor instead.
func (*CsvFileData) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{2}
}

func (x *CsvFileData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CsvFileData) GetFieldsFormatRegex() string {
	if x != nil {
		return x.FieldsFormatRegex
	}
	return ""
}

func (x *CsvFileData) GetFileData() *FileExchange.FileData {
	if x != nil {
		return x.FileData
	}
	return nil
}

// Get data
type GetRecordsByStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordStatus  RecordStatus           `protobuf:"varint,1,opt,name=record_status,json=recordStatus,proto3,enum=Dressy.ProcessingDatabase.RecordStatus" json:"record_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsByStatusRequest) Reset() {
	*x = GetRecordsByStatusRequest{}
	mi := &file_processingdatabase_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsByStatusRequest) ProtoMessage() {}

func (x *GetRecordsByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsByStatusRequest.ProtoReflect.Descriptor instead.
func (*GetRecordsByStatusRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordsByStatusRequest) GetRecordStatus() RecordStatus {
	if x != nil {
		return x.RecordStatus
	}
	return RecordStatus_NEW
}

type GetRecordsByStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Record              `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Status        *Common.CommandStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsByStatusResponse) Reset() {
	*x = GetRecordsByStatusResponse{}
	mi := &file_processingdatabase_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsByStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsByStatusResponse) ProtoMessage() {}

func (x *GetRecordsByStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsByStatusResponse.ProtoReflect.Descriptor instead.
func (*GetRecordsByStatusResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordsByStatusResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetRecordsByStatusResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetEmbeddingsByStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordStatus  RecordStatus           `protobuf:"varint,1,opt,name=record_status,json=recordStatus,proto3,enum=Dressy.ProcessingDatabase.RecordStatus" json:"record_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmbeddingsByStatusRequest) Reset() {
	*x = GetEmbeddingsByStatusRequest{}
	mi := &file_processingdatabase_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmbeddingsByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsByStatusRequest) ProtoMessage() {}

func (x *GetEmbeddingsByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsByStatusRequest.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsByStatusRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{5}
}

func (x *GetEmbeddingsByStatusRequest) GetRecordStatus() RecordStatus {
	if x != nil {
		return x.RecordStatus
	}
	return RecordStatus_NEW
}

type GetEmbeddingsByStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Embeddings    []*EmbeddingWithId     `protobuf:"bytes,1,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
	Status        *Common.CommandStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmbeddingsByStatusResponse) Reset() {
	*x = GetEmbeddingsByStatusResponse{}
	mi := &file_processingdatabase_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmbeddingsByStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsByStatusResponse) ProtoMessage() {}

func (x *GetEmbeddingsByStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsByStatusResponse.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsByStatusResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{6}
}

func (x *GetEmbeddingsByStatusResponse) GetEmbeddings() []*EmbeddingWithId {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

func (x *GetEmbeddingsByStatusResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetRecordByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      *Common.Id             `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordByIdRequest) Reset() {
	*x = GetRecordByIdRequest{}
	mi := &file_processingdatabase_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordByIdRequest) ProtoMessage() {}

func (x *GetRecordByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordByIdRequest.ProtoReflect.Descriptor instead.
func (*GetRecordByIdRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{7}
}

func (x *GetRecordByIdRequest) GetRecordId() *Common.Id {
	if x != nil {
		return x.RecordId
	}
	return nil
}

type GetRecordByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *Record                `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Status        *Common.CommandStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordByIdResponse) Reset() {
	*x = GetRecordByIdResponse{}
	mi := &file_processingdatabase_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordByIdResponse) ProtoMessage() {}

func (x *GetRecordByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordByIdResponse.ProtoReflect.Descriptor instead.
func (*GetRecordByIdResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{8}
}

func (x *GetRecordByIdResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *GetRecordByIdResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Update data
type UpdateRecordByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *Record                `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecordByIdRequest) Reset() {
	*x = UpdateRecordByIdRequest{}
	mi := &file_processingdatabase_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecordByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordByIdRequest) ProtoMessage() {}

func (x *UpdateRecordByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordByIdRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRecordByIdRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type UpdateRecordByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Common.CommandStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecordByIdResponse) Reset() {
	*x = UpdateRecordByIdResponse{}
	mi := &file_processingdatabase_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecordByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordByIdResponse) ProtoMessage() {}

func (x *UpdateRecordByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecordByIdResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRecordByIdResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Delete data
type AuthenticationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationRequest) Reset() {
	*x = AuthenticationRequest{}
	mi := &file_processingdatabase_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRequest) ProtoMessage() {}

func (x *AuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRequest.ProtoReflect.Descriptor instead.
func (*AuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{11}
}

type AuthenticationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RsaPublicKey  []byte                 `protobuf:"bytes,1,opt,name=rsa_public_key,json=rsaPublicKey,proto3" json:"rsa_public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationResponse) Reset() {
	*x = AuthenticationResponse{}
	mi := &file_processingdatabase_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationResponse) ProtoMessage() {}

func (x *AuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationResponse.ProtoReflect.Descriptor instead.
func (*AuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{12}
}

func (x *AuthenticationResponse) GetRsaPublicKey() []byte {
	if x != nil {
		return x.RsaPublicKey
	}
	return nil
}

type ClearTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthData      string                 `protobuf:"bytes,1,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearTableRequest) Reset() {
	*x = ClearTableRequest{}
	mi := &file_processingdatabase_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearTableRequest) ProtoMessage() {}

func (x *ClearTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearTableRequest.ProtoReflect.Descriptor instead.
func (*ClearTableRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{13}
}

func (x *ClearTableRequest) GetAuthData() string {
	if x != nil {
		return x.AuthData
	}
	return ""
}

type ClearTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Common.CommandStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearTableResponse) Reset() {
	*x = ClearTableResponse{}
	mi := &file_processingdatabase_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearTableResponse) ProtoMessage() {}

func (x *ClearTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearTableResponse.ProtoReflect.Descriptor instead.
func (*ClearTableResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{14}
}

func (x *ClearTableResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Main data object. Record contains all necessary data for any procedures, may be optimized by server with including only mandatory data objects for each client
// may be replaced with table-record structured message to optimize resources
type Record struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecordId       *Common.Id             `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Status         RecordStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=Dressy.ProcessingDatabase.RecordStatus" json:"status,omitempty"`
	Article        string                 `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"`
	Category       string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Subcategory    string                 `protobuf:"bytes,5,opt,name=subcategory,proto3" json:"subcategory,omitempty"`
	ImageUrl       string                 `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Tags           string                 `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	ImageEmbedding *Common.Embedding      `protobuf:"bytes,8,opt,name=image_embedding,json=imageEmbedding,proto3" json:"image_embedding,omitempty"`
	Norm           string                 `protobuf:"bytes,9,opt,name=norm,proto3" json:"norm,omitempty"`
	Metadata       string                 `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Source         string                 `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	MainRecordId   *Common.Id             `protobuf:"bytes,12,opt,name=main_record_id,json=mainRecordId,proto3" json:"main_record_id,omitempty"` // reference to main record of current thing
	SameGoods      string                 `protobuf:"bytes,13,opt,name=same_goods,json=sameGoods,proto3" json:"same_goods,omitempty"`            //json with id list of other records of current thing
	Gender         Gender                 `protobuf:"varint,14,opt,name=gender,proto3,enum=Dressy.ProcessingDatabase.Gender" json:"gender,omitempty"`
	Price          string                 `protobuf:"bytes,15,opt,name=price,proto3" json:"price,omitempty"`
	Brand          string                 `protobuf:"bytes,16,opt,name=brand,proto3" json:"brand,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_processingdatabase_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{15}
}

func (x *Record) GetRecordId() *Common.Id {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *Record) GetStatus() RecordStatus {
	if x != nil {
		return x.Status
	}
	return RecordStatus_NEW
}

func (x *Record) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *Record) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Record) GetSubcategory() string {
	if x != nil {
		return x.Subcategory
	}
	return ""
}

func (x *Record) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Record) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Record) GetImageEmbedding() *Common.Embedding {
	if x != nil {
		return x.ImageEmbedding
	}
	return nil
}

func (x *Record) GetNorm() string {
	if x != nil {
		return x.Norm
	}
	return ""
}

func (x *Record) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Record) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Record) GetMainRecordId() *Common.Id {
	if x != nil {
		return x.MainRecordId
	}
	return nil
}

func (x *Record) GetSameGoods() string {
	if x != nil {
		return x.SameGoods
	}
	return ""
}

func (x *Record) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNDEFINED
}

func (x *Record) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Record) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

type EmbeddingWithId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *Common.Id             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Embedding     *Common.Embedding      `protobuf:"bytes,2,opt,name=embedding,proto3" json:"embedding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddingWithId) Reset() {
	*x = EmbeddingWithId{}
	mi := &file_processingdatabase_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddingWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingWithId) ProtoMessage() {}

func (x *EmbeddingWithId) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingWithId.ProtoReflect.Descriptor instead.
func (*EmbeddingWithId) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{16}
}

func (x *EmbeddingWithId) GetId() *Common.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EmbeddingWithId) GetEmbedding() *Common.Embedding {
	if x != nil {
		return x.Embedding
	}
	return nil
}

// Getting embedding for searching similar records
type GetUserEmbeddingByKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *UserEmbeddingKey      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEmbeddingByKeyRequest) Reset() {
	*x = GetUserEmbeddingByKeyRequest{}
	mi := &file_processingdatabase_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEmbeddingByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmbeddingByKeyRequest) ProtoMessage() {}

func (x *GetUserEmbeddingByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmbeddingByKeyRequest.ProtoReflect.Descriptor instead.
func (*GetUserEmbeddingByKeyRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserEmbeddingByKeyRequest) GetKey() *UserEmbeddingKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type GetUserEmbeddingByKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Embedding     *Common.Embedding      `protobuf:"bytes,1,opt,name=embedding,proto3" json:"embedding,omitempty"`
	Status        *Common.CommandStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEmbeddingByKeyResponse) Reset() {
	*x = GetUserEmbeddingByKeyResponse{}
	mi := &file_processingdatabase_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEmbeddingByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmbeddingByKeyResponse) ProtoMessage() {}

func (x *GetUserEmbeddingByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmbeddingByKeyResponse.ProtoReflect.Descriptor instead.
func (*GetUserEmbeddingByKeyResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserEmbeddingByKeyResponse) GetEmbedding() *Common.Embedding {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *GetUserEmbeddingByKeyResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Checking for viewed records to avoid repeatings in user experience
type IsRecordViewedByUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *Common.Id             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordId      *Common.Id             `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsRecordViewedByUserRequest) Reset() {
	*x = IsRecordViewedByUserRequest{}
	mi := &file_processingdatabase_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRecordViewedByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRecordViewedByUserRequest) ProtoMessage() {}

func (x *IsRecordViewedByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRecordViewedByUserRequest.ProtoReflect.Descriptor instead.
func (*IsRecordViewedByUserRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{19}
}

func (x *IsRecordViewedByUserRequest) GetUserId() *Common.Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *IsRecordViewedByUserRequest) GetRecordId() *Common.Id {
	if x != nil {
		return x.RecordId
	}
	return nil
}

type IsRecordViewedByUserResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsRecordViewed bool                   `protobuf:"varint,1,opt,name=is_record_viewed,json=isRecordViewed,proto3" json:"is_record_viewed,omitempty"`
	Status         *Common.CommandStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IsRecordViewedByUserResponse) Reset() {
	*x = IsRecordViewedByUserResponse{}
	mi := &file_processingdatabase_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRecordViewedByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRecordViewedByUserResponse) ProtoMessage() {}

func (x *IsRecordViewedByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRecordViewedByUserResponse.ProtoReflect.Descriptor instead.
func (*IsRecordViewedByUserResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{20}
}

func (x *IsRecordViewedByUserResponse) GetIsRecordViewed() bool {
	if x != nil {
		return x.IsRecordViewed
	}
	return false
}

func (x *IsRecordViewedByUserResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Updating user viewed records list
type AddViewedRecordToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *Common.Id             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordId      *Common.Id             `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddViewedRecordToUserRequest) Reset() {
	*x = AddViewedRecordToUserRequest{}
	mi := &file_processingdatabase_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddViewedRecordToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddViewedRecordToUserRequest) ProtoMessage() {}

func (x *AddViewedRecordToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddViewedRecordToUserRequest.ProtoReflect.Descriptor instead.
func (*AddViewedRecordToUserRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{21}
}

func (x *AddViewedRecordToUserRequest) GetUserId() *Common.Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AddViewedRecordToUserRequest) GetRecordId() *Common.Id {
	if x != nil {
		return x.RecordId
	}
	return nil
}

type AddViewedRecordToUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Common.CommandStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddViewedRecordToUserResponse) Reset() {
	*x = AddViewedRecordToUserResponse{}
	mi := &file_processingdatabase_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddViewedRecordToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddViewedRecordToUserResponse) ProtoMessage() {}

func (x *AddViewedRecordToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddViewedRecordToUserResponse.ProtoReflect.Descriptor instead.
func (*AddViewedRecordToUserResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{22}
}

func (x *AddViewedRecordToUserResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Deleting ex-user's data
type DeleteUserByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *Common.Id             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserByIdRequest) Reset() {
	*x = DeleteUserByIdRequest{}
	mi := &file_processingdatabase_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserByIdRequest) ProtoMessage() {}

func (x *DeleteUserByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserByIdRequest) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteUserByIdRequest) GetUserId() *Common.Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

type DeleteUserByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Common.CommandStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserByIdResponse) Reset() {
	*x = DeleteUserByIdResponse{}
	mi := &file_processingdatabase_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserByIdResponse) ProtoMessage() {}

func (x *DeleteUserByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserByIdResponse) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteUserByIdResponse) GetStatus() *Common.CommandStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// User embedding data structure
type UserEmbedding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *UserEmbeddingKey      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Embedding     *Common.Embedding      `protobuf:"bytes,2,opt,name=embedding,proto3" json:"embedding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserEmbedding) Reset() {
	*x = UserEmbedding{}
	mi := &file_processingdatabase_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmbedding) ProtoMessage() {}

func (x *UserEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmbedding.ProtoReflect.Descriptor instead.
func (*UserEmbedding) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{25}
}

func (x *UserEmbedding) GetKey() *UserEmbeddingKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UserEmbedding) GetEmbedding() *Common.Embedding {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type UserEmbeddingKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *Common.Id             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Category      string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserEmbeddingKey) Reset() {
	*x = UserEmbeddingKey{}
	mi := &file_processingdatabase_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEmbeddingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmbeddingKey) ProtoMessage() {}

func (x *UserEmbeddingKey) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmbeddingKey.ProtoReflect.Descriptor instead.
func (*UserEmbeddingKey) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{26}
}

func (x *UserEmbeddingKey) GetUserId() *Common.Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserEmbeddingKey) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// Viewed records data structure
type ViewedRecords struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *Common.Id             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordIdList  *Common.IdList         `protobuf:"bytes,2,opt,name=record_id_list,json=recordIdList,proto3" json:"record_id_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewedRecords) Reset() {
	*x = ViewedRecords{}
	mi := &file_processingdatabase_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewedRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewedRecords) ProtoMessage() {}

func (x *ViewedRecords) ProtoReflect() protoreflect.Message {
	mi := &file_processingdatabase_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewedRecords.ProtoReflect.Descriptor instead.
func (*ViewedRecords) Descriptor() ([]byte, []int) {
	return file_processingdatabase_proto_rawDescGZIP(), []int{27}
}

func (x *ViewedRecords) GetUserId() *Common.Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ViewedRecords) GetRecordIdList() *Common.IdList {
	if x != nil {
		return x.RecordIdList
	}
	return nil
}

var File_processingdatabase_proto protoreflect.FileDescriptor

var file_processingdatabase_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x15,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0b,
	0x43, 0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x44, 0x72, 0x65,
	0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x52, 0x0a, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x44,
	0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x73, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65,
	0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xff, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x72, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x0c, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d,
	0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x6d, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x5d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x79, 0x0a, 0x1b, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1c, 0x49, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7a, 0x0a, 0x1c, 0x41, 0x64,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44,
	0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x78, 0x0a, 0x0d, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44,
	0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x2a, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4d, 0x41, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x49, 0x53, 0x45, 0x58, 0x10, 0x03, 0x32, 0xc4,
	0x07, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x72, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x2e,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x73, 0x76, 0x12, 0x1d, 0x2e,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x2e, 0x44,
	0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28,
	0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x44, 0x72, 0x65,
	0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb4, 0x04, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x14, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x37, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x30, 0x2e, 0x44, 0x72, 0x65, 0x73, 0x73, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x44, 0x72, 0x65, 0x73,
	0x73, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x79, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_processingdatabase_proto_rawDescOnce sync.Once
	file_processingdatabase_proto_rawDescData = file_processingdatabase_proto_rawDesc
)

func file_processingdatabase_proto_rawDescGZIP() []byte {
	file_processingdatabase_proto_rawDescOnce.Do(func() {
		file_processingdatabase_proto_rawDescData = protoimpl.X.CompressGZIP(file_processingdatabase_proto_rawDescData)
	})
	return file_processingdatabase_proto_rawDescData
}

var file_processingdatabase_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_processingdatabase_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_processingdatabase_proto_goTypes = []any{
	(RecordStatus)(0),                     // 0: Dressy.ProcessingDatabase.RecordStatus
	(Gender)(0),                           // 1: Dressy.ProcessingDatabase.Gender
	(*InsertRecordsRequest)(nil),          // 2: Dressy.ProcessingDatabase.InsertRecordsRequest
	(*InsertRecordsResponse)(nil),         // 3: Dressy.ProcessingDatabase.InsertRecordsResponse
	(*CsvFileData)(nil),                   // 4: Dressy.ProcessingDatabase.CsvFileData
	(*GetRecordsByStatusRequest)(nil),     // 5: Dressy.ProcessingDatabase.GetRecordsByStatusRequest
	(*GetRecordsByStatusResponse)(nil),    // 6: Dressy.ProcessingDatabase.GetRecordsByStatusResponse
	(*GetEmbeddingsByStatusRequest)(nil),  // 7: Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest
	(*GetEmbeddingsByStatusResponse)(nil), // 8: Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse
	(*GetRecordByIdRequest)(nil),          // 9: Dressy.ProcessingDatabase.GetRecordByIdRequest
	(*GetRecordByIdResponse)(nil),         // 10: Dressy.ProcessingDatabase.GetRecordByIdResponse
	(*UpdateRecordByIdRequest)(nil),       // 11: Dressy.ProcessingDatabase.UpdateRecordByIdRequest
	(*UpdateRecordByIdResponse)(nil),      // 12: Dressy.ProcessingDatabase.UpdateRecordByIdResponse
	(*AuthenticationRequest)(nil),         // 13: Dressy.ProcessingDatabase.AuthenticationRequest
	(*AuthenticationResponse)(nil),        // 14: Dressy.ProcessingDatabase.AuthenticationResponse
	(*ClearTableRequest)(nil),             // 15: Dressy.ProcessingDatabase.ClearTableRequest
	(*ClearTableResponse)(nil),            // 16: Dressy.ProcessingDatabase.ClearTableResponse
	(*Record)(nil),                        // 17: Dressy.ProcessingDatabase.Record
	(*EmbeddingWithId)(nil),               // 18: Dressy.ProcessingDatabase.EmbeddingWithId
	(*GetUserEmbeddingByKeyRequest)(nil),  // 19: Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest
	(*GetUserEmbeddingByKeyResponse)(nil), // 20: Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse
	(*IsRecordViewedByUserRequest)(nil),   // 21: Dressy.ProcessingDatabase.IsRecordViewedByUserRequest
	(*IsRecordViewedByUserResponse)(nil),  // 22: Dressy.ProcessingDatabase.IsRecordViewedByUserResponse
	(*AddViewedRecordToUserRequest)(nil),  // 23: Dressy.ProcessingDatabase.AddViewedRecordToUserRequest
	(*AddViewedRecordToUserResponse)(nil), // 24: Dressy.ProcessingDatabase.AddViewedRecordToUserResponse
	(*DeleteUserByIdRequest)(nil),         // 25: Dressy.ProcessingDatabase.DeleteUserByIdRequest
	(*DeleteUserByIdResponse)(nil),        // 26: Dressy.ProcessingDatabase.DeleteUserByIdResponse
	(*UserEmbedding)(nil),                 // 27: Dressy.ProcessingDatabase.UserEmbedding
	(*UserEmbeddingKey)(nil),              // 28: Dressy.ProcessingDatabase.UserEmbeddingKey
	(*ViewedRecords)(nil),                 // 29: Dressy.ProcessingDatabase.ViewedRecords
	(*Common.CommandStatus)(nil),          // 30: Dressy.Common.CommandStatus
	(*FileExchange.FileData)(nil),         // 31: Dressy.FileExchange.FileData
	(*Common.Id)(nil),                     // 32: Dressy.Common.Id
	(*Common.Embedding)(nil),              // 33: Dressy.Common.Embedding
	(*Common.IdList)(nil),                 // 34: Dressy.Common.IdList
	(*FileExchange.UploadStatus)(nil),     // 35: Dressy.FileExchange.UploadStatus
}
var file_processingdatabase_proto_depIdxs = []int32{
	17, // 0: Dressy.ProcessingDatabase.InsertRecordsRequest.records:type_name -> Dressy.ProcessingDatabase.Record
	30, // 1: Dressy.ProcessingDatabase.InsertRecordsResponse.status:type_name -> Dressy.Common.CommandStatus
	31, // 2: Dressy.ProcessingDatabase.CsvFileData.file_data:type_name -> Dressy.FileExchange.FileData
	0,  // 3: Dressy.ProcessingDatabase.GetRecordsByStatusRequest.record_status:type_name -> Dressy.ProcessingDatabase.RecordStatus
	17, // 4: Dressy.ProcessingDatabase.GetRecordsByStatusResponse.records:type_name -> Dressy.ProcessingDatabase.Record
	30, // 5: Dressy.ProcessingDatabase.GetRecordsByStatusResponse.status:type_name -> Dressy.Common.CommandStatus
	0,  // 6: Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest.record_status:type_name -> Dressy.ProcessingDatabase.RecordStatus
	18, // 7: Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse.embeddings:type_name -> Dressy.ProcessingDatabase.EmbeddingWithId
	30, // 8: Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse.status:type_name -> Dressy.Common.CommandStatus
	32, // 9: Dressy.ProcessingDatabase.GetRecordByIdRequest.record_id:type_name -> Dressy.Common.Id
	17, // 10: Dressy.ProcessingDatabase.GetRecordByIdResponse.record:type_name -> Dressy.ProcessingDatabase.Record
	30, // 11: Dressy.ProcessingDatabase.GetRecordByIdResponse.status:type_name -> Dressy.Common.CommandStatus
	17, // 12: Dressy.ProcessingDatabase.UpdateRecordByIdRequest.record:type_name -> Dressy.ProcessingDatabase.Record
	30, // 13: Dressy.ProcessingDatabase.UpdateRecordByIdResponse.status:type_name -> Dressy.Common.CommandStatus
	30, // 14: Dressy.ProcessingDatabase.ClearTableResponse.status:type_name -> Dressy.Common.CommandStatus
	32, // 15: Dressy.ProcessingDatabase.Record.record_id:type_name -> Dressy.Common.Id
	0,  // 16: Dressy.ProcessingDatabase.Record.status:type_name -> Dressy.ProcessingDatabase.RecordStatus
	33, // 17: Dressy.ProcessingDatabase.Record.image_embedding:type_name -> Dressy.Common.Embedding
	32, // 18: Dressy.ProcessingDatabase.Record.main_record_id:type_name -> Dressy.Common.Id
	1,  // 19: Dressy.ProcessingDatabase.Record.gender:type_name -> Dressy.ProcessingDatabase.Gender
	32, // 20: Dressy.ProcessingDatabase.EmbeddingWithId.id:type_name -> Dressy.Common.Id
	33, // 21: Dressy.ProcessingDatabase.EmbeddingWithId.embedding:type_name -> Dressy.Common.Embedding
	28, // 22: Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest.key:type_name -> Dressy.ProcessingDatabase.UserEmbeddingKey
	33, // 23: Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse.embedding:type_name -> Dressy.Common.Embedding
	30, // 24: Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse.status:type_name -> Dressy.Common.CommandStatus
	32, // 25: Dressy.ProcessingDatabase.IsRecordViewedByUserRequest.user_id:type_name -> Dressy.Common.Id
	32, // 26: Dressy.ProcessingDatabase.IsRecordViewedByUserRequest.record_id:type_name -> Dressy.Common.Id
	30, // 27: Dressy.ProcessingDatabase.IsRecordViewedByUserResponse.status:type_name -> Dressy.Common.CommandStatus
	32, // 28: Dressy.ProcessingDatabase.AddViewedRecordToUserRequest.user_id:type_name -> Dressy.Common.Id
	32, // 29: Dressy.ProcessingDatabase.AddViewedRecordToUserRequest.record_id:type_name -> Dressy.Common.Id
	30, // 30: Dressy.ProcessingDatabase.AddViewedRecordToUserResponse.status:type_name -> Dressy.Common.CommandStatus
	32, // 31: Dressy.ProcessingDatabase.DeleteUserByIdRequest.user_id:type_name -> Dressy.Common.Id
	30, // 32: Dressy.ProcessingDatabase.DeleteUserByIdResponse.status:type_name -> Dressy.Common.CommandStatus
	28, // 33: Dressy.ProcessingDatabase.UserEmbedding.key:type_name -> Dressy.ProcessingDatabase.UserEmbeddingKey
	33, // 34: Dressy.ProcessingDatabase.UserEmbedding.embedding:type_name -> Dressy.Common.Embedding
	32, // 35: Dressy.ProcessingDatabase.UserEmbeddingKey.user_id:type_name -> Dressy.Common.Id
	32, // 36: Dressy.ProcessingDatabase.ViewedRecords.user_id:type_name -> Dressy.Common.Id
	34, // 37: Dressy.ProcessingDatabase.ViewedRecords.record_id_list:type_name -> Dressy.Common.IdList
	2,  // 38: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.InsertRecords:input_type -> Dressy.ProcessingDatabase.InsertRecordsRequest
	31, // 39: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.ImportCsv:input_type -> Dressy.FileExchange.FileData
	5,  // 40: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetRecordsByStatus:input_type -> Dressy.ProcessingDatabase.GetRecordsByStatusRequest
	7,  // 41: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetEmbeddingsByStatus:input_type -> Dressy.ProcessingDatabase.GetEmbeddingsByStatusRequest
	9,  // 42: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetRecordById:input_type -> Dressy.ProcessingDatabase.GetRecordByIdRequest
	11, // 43: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.UpdateRecordById:input_type -> Dressy.ProcessingDatabase.UpdateRecordByIdRequest
	13, // 44: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.Authentication:input_type -> Dressy.ProcessingDatabase.AuthenticationRequest
	15, // 45: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.ClearTable:input_type -> Dressy.ProcessingDatabase.ClearTableRequest
	19, // 46: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.GetUserEmbeddingByKey:input_type -> Dressy.ProcessingDatabase.GetUserEmbeddingByKeyRequest
	21, // 47: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.IsRecordViewedByUser:input_type -> Dressy.ProcessingDatabase.IsRecordViewedByUserRequest
	23, // 48: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.AddViewedRecordToUser:input_type -> Dressy.ProcessingDatabase.AddViewedRecordToUserRequest
	25, // 49: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.DeleteUserById:input_type -> Dressy.ProcessingDatabase.DeleteUserByIdRequest
	3,  // 50: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.InsertRecords:output_type -> Dressy.ProcessingDatabase.InsertRecordsResponse
	35, // 51: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.ImportCsv:output_type -> Dressy.FileExchange.UploadStatus
	6,  // 52: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetRecordsByStatus:output_type -> Dressy.ProcessingDatabase.GetRecordsByStatusResponse
	8,  // 53: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetEmbeddingsByStatus:output_type -> Dressy.ProcessingDatabase.GetEmbeddingsByStatusResponse
	10, // 54: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.GetRecordById:output_type -> Dressy.ProcessingDatabase.GetRecordByIdResponse
	12, // 55: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.UpdateRecordById:output_type -> Dressy.ProcessingDatabase.UpdateRecordByIdResponse
	14, // 56: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.Authentication:output_type -> Dressy.ProcessingDatabase.AuthenticationResponse
	16, // 57: Dressy.ProcessingDatabase.ProcessingDatabaseRecords.ClearTable:output_type -> Dressy.ProcessingDatabase.ClearTableResponse
	20, // 58: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.GetUserEmbeddingByKey:output_type -> Dressy.ProcessingDatabase.GetUserEmbeddingByKeyResponse
	22, // 59: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.IsRecordViewedByUser:output_type -> Dressy.ProcessingDatabase.IsRecordViewedByUserResponse
	24, // 60: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.AddViewedRecordToUser:output_type -> Dressy.ProcessingDatabase.AddViewedRecordToUserResponse
	26, // 61: Dressy.ProcessingDatabase.ProcessingDatabaseUsers.DeleteUserById:output_type -> Dressy.ProcessingDatabase.DeleteUserByIdResponse
	50, // [50:62] is the sub-list for method output_type
	38, // [38:50] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_processingdatabase_proto_init() }
func file_processingdatabase_proto_init() {
	if File_processingdatabase_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_processingdatabase_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_processingdatabase_proto_goTypes,
		DependencyIndexes: file_processingdatabase_proto_depIdxs,
		EnumInfos:         file_processingdatabase_proto_enumTypes,
		MessageInfos:      file_processingdatabase_proto_msgTypes,
	}.Build()
	File_processingdatabase_proto = out.File
	file_processingdatabase_proto_rawDesc = nil
	file_processingdatabase_proto_goTypes = nil
	file_processingdatabase_proto_depIdxs = nil
}
