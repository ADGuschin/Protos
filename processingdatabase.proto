syntax = "proto3";

import public "fileexchange.proto";


package ProcessingDatabase; 

// The processing database service, shared for scrapper, preprocessor and processor units
service ProcessingDatabase {
  // Inserts data into a table, allowed only for scrapper
  rpc Insert (InsertRequest) returns (InsertResult);
  rpc ImportCSV(stream FileExchange.FileData) returns (FileExchange.UploadStatus);

  // Getting data by status, allowed only for preprocessor and processor
  // For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
  rpc GetByStatus(GetByStatusRequest) returns (GetByStatusResult);

  // Updating data after preprocessing or processing, status will be updated automatically
  rpc UpdateByID(UpdateByIDRequest) returns (UpdateByIDResult);
  //all checkings will be performed by the server
}

// Insert data
message InsertRequest {
	RecordStatus status = 1;
	Record record = 2;
}
message CSVFileData {
	string source = 1;
	FileExchange.FileData FileData = 2;
}
message InsertResult {
	CommandResult result = 1;
}

// GetByStatus data
message GetByStatusRequest {
	RecordStatus status = 1;
}
message GetByStatusResult {
	Record record = 1;
	CommandResult result = 2;
}

// UpdateByID data
message UpdateByIDRequest {
	Record record = 1;
}
message UpdateByIDResult {
	CommandResult result = 1;
}

// Describes set of possible values for Record status
enum RecordStatus {
	NEW = 0;
	PREPROCESSED = 1;
	PROCEESSED = 2;
	FINISHED = 3;
	ERROR = 4;
}

// Main data object. Record contains all necessary data for any procedures, may be optimized by server with including only mandatory data objects for each client
// may be replaced with table-record structured message to optimize resources
message Record {
	int32 Id = 1;
	RecordStatus Status = 2;
	string Article = 3;
	string Category = 4;
	string Subcategory = 5;
	string ImageUrl = 6;
	string Tags = 7;
	string Vector = 8;
	string Norm = 9;
	string Metadata = 10; 
}

// Status message with results of procedure execution
message CommandResult {
	int32 errorCode = 1;
	string errorMessage = 2;
}


